// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package schedule_storage

import (
	"context"
)

const createScheduleEntry = `-- name: CreateScheduleEntry :one
INSERT
    or REPLACE INTO schedule (
        activity_id,
        datetime,
        trainer,
        activity,
        pre_entry,
        begin_date
    )
VALUES
    (?, ?, ?, ?, ?, ?) RETURNING id, activity_id, datetime, trainer, activity, pre_entry, begin_date
`

type CreateScheduleEntryParams struct {
	ActivityID int64  `json:"activity_id"`
	Datetime   string `json:"datetime"`
	Trainer    string `json:"trainer"`
	Activity   string `json:"activity"`
	PreEntry   bool   `json:"pre_entry"`
	BeginDate  string `json:"begin_date"`
}

func (q *Queries) CreateScheduleEntry(ctx context.Context, arg CreateScheduleEntryParams) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, createScheduleEntry,
		arg.ActivityID,
		arg.Datetime,
		arg.Trainer,
		arg.Activity,
		arg.PreEntry,
		arg.BeginDate,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.ActivityID,
		&i.Datetime,
		&i.Trainer,
		&i.Activity,
		&i.PreEntry,
		&i.BeginDate,
	)
	return i, err
}

const deleteScheduleEntry = `-- name: DeleteScheduleEntry :exec
DELETE FROM
    schedule
WHERE
    ID = ?
`

func (q *Queries) DeleteScheduleEntry(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteScheduleEntry, id)
	return err
}

const getLatestScheduleEntry = `-- name: GetLatestScheduleEntry :one
SELECT
    id, activity_id, datetime, trainer, activity, pre_entry, begin_date
FROM
    schedule
ORDER BY
    datetime DESC
LIMIT
    1
`

func (q *Queries) GetLatestScheduleEntry(ctx context.Context) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, getLatestScheduleEntry)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.ActivityID,
		&i.Datetime,
		&i.Trainer,
		&i.Activity,
		&i.PreEntry,
		&i.BeginDate,
	)
	return i, err
}

const getScheduleEntriesWithPreEntry = `-- name: GetScheduleEntriesWithPreEntry :many
SELECT
    id, activity_id, datetime, trainer, activity, pre_entry, begin_date
FROM
    schedule
WHERE
    datetime > datetime('now')
    AND begin_date > datetime('now')
    AND pre_entry = 1
ORDER BY
    datetime ASC
`

func (q *Queries) GetScheduleEntriesWithPreEntry(ctx context.Context) ([]Schedule, error) {
	rows, err := q.db.QueryContext(ctx, getScheduleEntriesWithPreEntry)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Schedule
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.ActivityID,
			&i.Datetime,
			&i.Trainer,
			&i.Activity,
			&i.PreEntry,
			&i.BeginDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScheduleEntry = `-- name: GetScheduleEntry :one
SELECT
    id, activity_id, datetime, trainer, activity, pre_entry, begin_date
FROM
    schedule
WHERE
    id = ?
LIMIT
    1
`

func (q *Queries) GetScheduleEntry(ctx context.Context, id int64) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, getScheduleEntry, id)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.ActivityID,
		&i.Datetime,
		&i.Trainer,
		&i.Activity,
		&i.PreEntry,
		&i.BeginDate,
	)
	return i, err
}

const getScheduleEntryByActivityID = `-- name: GetScheduleEntryByActivityID :one
SELECT
    id, activity_id, datetime, trainer, activity, pre_entry, begin_date
FROM
    schedule
WHERE
    activity_id = ?
LIMIT
    1
`

func (q *Queries) GetScheduleEntryByActivityID(ctx context.Context, activityID int64) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, getScheduleEntryByActivityID, activityID)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.ActivityID,
		&i.Datetime,
		&i.Trainer,
		&i.Activity,
		&i.PreEntry,
		&i.BeginDate,
	)
	return i, err
}

const updateScheduleEntry = `-- name: UpdateScheduleEntry :exec
UPDATE
    schedule
SET
    activity_id = ?,
    datetime = ?,
    trainer = ?,
    activity = ?,
    pre_entry = ?,
    begin_date = ?
WHERE
    ID = ?
`

type UpdateScheduleEntryParams struct {
	ActivityID int64  `json:"activity_id"`
	Datetime   string `json:"datetime"`
	Trainer    string `json:"trainer"`
	Activity   string `json:"activity"`
	PreEntry   bool   `json:"pre_entry"`
	BeginDate  string `json:"begin_date"`
	ID         int64  `json:"id"`
}

func (q *Queries) UpdateScheduleEntry(ctx context.Context, arg UpdateScheduleEntryParams) error {
	_, err := q.db.ExecContext(ctx, updateScheduleEntry,
		arg.ActivityID,
		arg.Datetime,
		arg.Trainer,
		arg.Activity,
		arg.PreEntry,
		arg.BeginDate,
		arg.ID,
	)
	return err
}
